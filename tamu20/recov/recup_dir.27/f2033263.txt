alse)
    {
        switch(external.places.currentPlace.name)
        {
        case "KioskMode":
            break;

        default:
            onClick_ChangeView();
            break;
        }
    }

	if(g_semgr)
	{
		try { g_semgr.AbortQuery(); } catch(e) {}
	}
}

function navbar_SwitchedHelpFiles()
{
	// throw away previous g_semgr
	g_aSearchVar = new Array();
	g_semgr      = null;

	UpdateEdition();
}

function navbar_OptionsChanged()
{
	idTB.SetVisibility( "FAVORITES", g_options.ShowFavorites );
	idTB.SetVisibility( "HISTORY"  , g_options.ShowHistory   );

	if(idTB.Mode != g_options.TextLabels)
	{
		idTB.Mode = g_options.TextLabels;
	}
}

////////////////////////////////////////////////////////////////////////////////
//
// Code for validating an outside link 
//

function SanitizeLink( strLink )
{
	var reScript = new RegExp( "(javascript:|vbscript:|<|>)", "i");
	if(reScript.test( strLink))
	{
		return null;
	}
	
	var reAppHTTP = new RegExp( "^(app:http:)", "i" ); 
	if(reAppHTTP.test( strLink ))
	{
		var strURL = strLink.slice( 9 );
		var strParsedURL = pchealth.TextHelpers.ParseURL( strURL );
		var strBase = strParsedURL.BasePart;
		strBase = pchealth.TextHelpers.URLUnescape( strBase, true );
		strBase = pchealth.TextHelpers.URLEscape( strBase, true );
		strParsedURL.BasePart = strBase;
		var strFinalURL = strParsedURL.BuildFullURL();
		return( "app:http:" + strFinalURL );
	}

	var reHCPNews = new RegExp( "^(hcp://)", "i" ); 
	if(reHCPNews.test( strLink ))
	{
		var strURL = strLink.slice( 6 );
		var strParsedURL = pchealth.TextHelpers.ParseURL( strURL );
		var strBase = strParsedURL.BasePart;
		strBase = pchealth.TextHelpers.URLUnescape( strBase, true );
		strBase = pchealth.TextHelpers.URLEscape( strBase, true );
		strParsedURL.BasePart = strBase;
		var strFinalURL = strParsedURL.BuildFullURL();
		return( "hcp://" + strFinalURL );
	}
		
	var reHTTP = new RegExp( "^(http:)", "i" ); 
	if(reHTTP.test( strLink ))
	{
		var strURL = strLink.slice( 5 );
		var strParsedURL = pchealth.TextHelpers.ParseURL( strURL );
		var strBase = strParsedURL.BasePart;
		strBase = pchealth.TextHelpers.URLUnescape( strBase, true );
		strBase = pchealth.TextHelpers.URLEscape( strBase, true );
		strParsedURL.BasePart = strBase;
		var strFinalURL = strParsedURL.BuildFullURL();
		return( "http:" + strFinalURL );
	}

	var reAppHTTPs = new RegExp( "^(app:https:)", "i" ); 
	if(reAppHTTPs.test( strLink ))
	{
		var strURL = strLink.slice( 10 );
		var strParsedURL = pchealth.TextHelpers.ParseURL( strURL );
		var strBase = strParsedURL.BasePart;
		strBase = pchealth.TextHelpers.URLUnescape( strBase, true );
		strBase = pchealth.TextHelpers.URLEscape( strBase, true );
		strParsedURL.BasePart = strBase;
		var strFinalURL = strParsedURL.BuildFullURL();
		return( "app:https:" + strFinalURL );
	}

	var reHTTPs = new RegExp( "^(https:)", "i" ); 	
	if(reHTTPs.test( strLink ))
	{
		var strURL = strLink.slice( 6 );
		var strParsedURL = pchealth.TextHelpers.ParseURL( strURL );
		var strBase = strParsedURL.BasePart;
		strBase = pchealth.TextHelpers.URLUnescape( strBase, true );
		strBase = pchealth.TextHelpers.URLEscape( strBase, true );
		strParsedURL.BasePart = strBase;
		var strFinalURL = strParsedURL.BuildFullURL();
		return( "https:" + strFinalURL );
	}
	
	return null;
}



BuildPage();

</SCRIPT>

<SCRIPT LANGUAGE="JScript" EVENT="onCommand( tb, id )" FOR="idTB">
ProcessToolbarCommands( tb, id );
</SCRIPT>

<helpcenter:events id=idEvents onBeforeNavigate="navbar_BeforeNavigate();" onContextSwitch="navbar_ContextSwitch();" onTravelDone="navbar_TravelDone();" onShutdown="navbar_Shutdown();" onSwitchedHelpFiles="navbar_SwitchedHelpFiles()" onOptionsChanged="navbar_OptionsChanged()" />

<helpcenter:state id=idState identity="NavBar" />

</HTML>
