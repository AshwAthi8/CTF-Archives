 error has occurred in this dialog.";
var L_ErrorNumber_Text = "Error: ";
function HandleError(message, url, line)
{
var str = L_Dialog_ErrorMessage + "\n\n"
+ L_ErrorNumber_Text + line + "\n"
+ message;
alert (str);
window.close();
return true;
}
var g_bSearchList = false;
var g_nTimeoutID;
var g_szLastFound = "";
var g_nLastFoundIndex = 0;
var g_nMatchLength = 0;
function GetSampleString()
{
var strReturn = "AaBbYyZz";
if (txtFontName.value != "")
{
switch (dialogHelper.getCharset(txtFontName.value))
{
case 2:
{
strReturn = "Symbol";
break;
}
case 128:
{
strReturn = "Aa\u3042\u3041\u30a2\u30a1\u4e9c\u5b87";
break;
}
case 129:
case 130:
{
strReturn = "\uac00\ub098\ub2e4\u0041\u0061\u0042\u0062\u0059\u0079\u005a\u007a";
break;
}
case 136:
{
strReturn = "\u4e2d\u6587\u5b57\u578b\u7bc4\u4f8b";
break;
}
case 161:
{
strReturn = "AaBb\u0391\u03b1\u0392\u03b2";
break;
}
case 162:
{
strReturn = "AaBb\u011e\u011f\u015e\u015f";
break;
}
case 177:
{
strReturn = "AaBb\u05e0\u05e1\u05e9\u05ea";
break;
}
case 178:
case 179:
{
strReturn = "AaBb\u0639\u0645\u0646\u062e\u0631\u0648\u0643\u0645";
break;
}
case 204:
{
strReturn = "AaBb\u0411\u0431\u0424\u0444";
break;
}
case 238:
{
strReturn = "AaBb\u00c1\u00e1\u00d4\u00f4";
break;
}
case 255:
{
strReturn = "Aa\u00f8\u00f1\u00fd";
break;
}
}
}
return strReturn;
}
function getCheckStateCmd(checkbox, range)
{
checkbox.checked = (true == range.queryCommandState(checkbox.value));
}
function getSelectStateCmd(select, range)
{
var index;
if (null != range.queryCommandValue(select.id.substring(3)))
{
for (index = 0; index < select.options.length; index++)
{
if (select.options[index].value ==
range.queryCommandValue(select.id.substring(3)))
{
select.selectedIndex = index;
break;
}
}
}
else
{
select.selectedIndex = -1;
}
}
function setCheckStateCmd(checkbox, range)
{
if (checkbox.checked !=
(true == range.queryCommandState(checkbox.value)))
{
range.execCommand(checkbox.value, false);
}
}
function setSelectStateCmd(select, range)
{
if (-1 != select.selectedIndex)
{
range.execCommand(select.id.substring(3), false,
select.options[select.selectedIndex].value);
}
}
function NoCaseCompare(str1, str2)
{
var ideo1 = 1 != escape(str1.charAt(0)).length;
var ideo2 = 1 != escape(str2.charAt(0)).length;
if (ideo1 != ideo2)
return ideo1 ? -1 : 1;
if (str1.toLowerCase() < str2.toLowerCase())
return -1;
if (str1.toLowerCase() > str2.toLowerCase())
return 1;
return 0;
}
function fillFontSelect(select)
{
var index;
var fontList = new Array();
var optFontName;
var len = dialogHelper.fonts.length;
for (index = 0; index < len; index++)
{
fontList[index] =
dialogHelper.fonts.item(index);
}
fontList.sort(NoCaseCompare);
for (index = 0; index < fontList.length; index++)
{
optFontName = new Option();
optFontName.value = fontList[index];
optFontName.text = fontList[index];
select.options[index] = optFontName;
}
}
function setFont(range)
{
var FontNameCommand = "FontName";
if (window.event.srcElement == txtFontName ||
window.event.srcElement == cmdFontName)
{
range.text = GetSampleString();
range = getTextRange(elmSample);
}
if (-1 != cmdFontName.selectedIndex)
{
range.execCommand(FontNameCommand, false, txtFontName.value);
}
}
function getFontStyle()
{
var cmdBold = "Bold";
var cmdItalic = "Italic";
var globalDoc = window.dialogArguments;
var range = globalDoc;
with (range)
{
if (queryCommandState(cmdBold) && queryCommandState(cmdItalic))
{
selFontStyle.value = "Bold-Italic";
}
else if (queryCommandState(cmdBold))
{
selFontStyle.value = "Bold";
}
else if (queryCommandState(cmdItalic))
{
selFontStyle.value = "Italic";
}
else
{
selFontStyle.value = "Regular";
}
}
}
function setFontStyle(range)
{
var cmdBold = "Bold";
var cmdItalic = "Italic";
with (range)
{
if ("Bold-Italic" == selFontStyle.value)
{
if (true != queryCommandState(cmdBold))
{
execCommand(cmdBold, false);
}
if (true != queryCommandState(cmdItalic))
{
execCommand(cmdItalic, false);
}
}
else if ("Bold" == selFontStyle.value)
{
if (true != queryCommandState(cmdBold))
{
execCommand(cmdBold, false);
}
if (true == queryCommandState(cmdItalic))
{
execCommand(cmdItalic, false);
}
}
else if ("Italic" == selFontStyle.value)
{
if (true == queryCommandState(cmdBold))
{
execCommand(cmdBold, false);
}
if (true != queryCommandState(cmdItalic))
{
execCommand(cmdItalic, false);
}
}
else
{
if (true == queryCommandState(cmdBold))
{
execCommand(cmdBold, false);
}
if (true == queryCommandState(cmdItalic))
{
execCommand(cmdItalic, false);
}
}
}
}
function getFontColor()
{
var cmdForeColor = "ForeColor";
var globalDoc = window.dialogArguments;
var range = globalDoc;
var intColor = range.queryCommandValue(cmdForeColor);
if (null != intColor)
{
selColor.value = intColor;
if (parseInt(selColor.value) != parseInt(intColor))
{
selColor.customColor = intColor;
selColor.value = "custom";
}
}
else
{
selColor.selectedIndex = -1;
}
}
function setFontColor(range)
{
var cmdForeColor = "ForeColor";
var intDefaultColor = 0;
if (-1 != selColor.selectedIndex)
{
if ("custom" == selColor.value)
{
range.execCommand(cmdForeColor, false,
parseInt(selColor.customColor));
return;
}
else
{
range.execCommand(cmdForeColor, false,
parseInt(selColor.value));
}
}
}
function syncSelect(ctlSelect, ctlText)
{
if (-1 != ctlSelect.selectedIndex)
{
if (ctlText.value.toLowerCase()
== ctlSelect.options[ctlSelect.selectedIndex]
.text.toLowerCase())
{
ctlText.value = ctlSelect.options[ctlSelect.selectedIndex].text;
}
}
}
function syncSelect2(ctlSelect, ctlText)
{
if (-1 != ctlSelect.selectedIndex)
{
ctlText.value = ctlSelect.options[ctlSelect.selectedIndex].text;
}
}
function findMatch (strMatch, optionsList)
{
var index;
var index2;
var bestChar = 0;
var bestMatch = 0;
var strOptText;
for (index = 0; index < optionsList.length; index++)
{
strOptText = optionsList.options[index].text;
for (index2 = bestChar; index2 < strMatch.length; index2++)
{
if (strMatch.substring(0, index2 + 1).toLowerCase() ==
strOptText.substring(0, index2 + 1)
.toLowerCase())
{
bestChar = index2 + 1;
bestMatch = index;
}
else
{
break;
}
}
}
return bestMatch;
}
function updateSample()
{
var rngSample = getTextRange(elmSample);
setCheckStateCmd(chkUnderline, rngSample);
rngSample.text = GetSampleString();
rngSample = getTextRange(elmSample);
setFont(rngSample);
setSelectStateCmd(cmdFontSize, rngSample);
setFontStyle(rngSample);
setFontColor(rngSample);
}
function searchText()
{
var index;
var index2;
var bestChar = g_nMatchLength;
var bestMatch = g_nLastFoundIndex;
var strOptText;
var optionsList = cmdFontName.options;
var strMatch = txtFontName.value;
if (strMatch.length == 0)
{
cmdFontName.selectedIndex = -1;
g_nMatchLength = 0;
g_nLastFoundIndex = 0;
g_bSearchList = false;
g_szLastFound = "";
return;
}
if (strMatch.length >= g_szLastFound.length
&& (strMatch.substring(0, g_nMatchLength).toLowerCase()
== g_szLastFound.substring(0, g_nMatchLength).toLowerCase()))
{
index = g_nLastFoundIndex;
}
else
{
index = 0;
bestChar = 0;
}
for (; index < optionsList.length; index++)
{
strOptText = optionsList.options[index].text;
for (index2 = bestChar; index2 < strMatch.length; index2++)
{
if (strMatch.substring(index2, index2 + 1).toLowerCase() ==
strOptText.substring(index2, index2 + 1)
.toLowerCase())
{
bestChar = index2 + 1;
bestMatch = index;
g_nLastFoundIndex = bestMatch;
g_nMatchLegth = bestChar;
}
else
{
break;
}
}
if (bestChar > 0 && index < optionsList.options.length - 2 &&
optionsList.options[index + 1].text
.substring(bestChar - 1, bestChar).toLowerCase()
!= strMatch.substring(bestChar - 1, bestChar).toLowerCase())
{
break;
}
}
cmdFontName.selectedIndex = bestMatch;
g_bSearchList = false;
g_szLastFound = txtFontName.value;
}
function TextboxKeyDown(textbox, select, iKeyCode)
{
var fReturn = false;
if (38 == iKeyCode || 40 ==iKeyCode)
{
var iDirection = (iKeyCode == 38) ? -1 : 1;
if (!((iDirection == 1 &&
!(select.selectedIndex < select.options.length - 1))
|| (iDirection == -1 && !select.selectedIndex)))
{
select.selectedIndex = select.selectedIndex + iDirection;
textbox.value =
select.options(select.selectedIndex).text;
textbox.select();
updateSample(getTextRange(elmSample));
}
fReturn = true;
}
return fReturn;
}
function syncTextFont()
{
if (TextboxKeyDown(txtFontName, cmdFontName, window.event.keyCode))
return;
if (g_szLastFound.toLowerCase() == txtFontName.value.toLowerCase())
{
return;
}
if (g_bSearchList)
{
window.clearTimeout(g_nTimeoutID);
}
g_bSearchList = true;
g_nTimeoutID = window.setTimeout("searchText()", 200);
}
function loadBdy()
{
var doc = window.dialogArguments;
var L_InsideFrameset_ErrorMessage =
"This command is not available because the page contains frames.";
if (doc.parentWindow.frames.length > 0 &&
doc.all.tags("IFRAME").length == 0)
{
alert(L_InsideFrameset_ErrorMessage);
window.close();
}
var rngCurrent = doc;
document.onhelp = new Function("callHelp(window.event.srcElement)");
document.onmouseup = new Function("mouseClick()");
txtFontName.onblur = new
Function("syncSelect(cmdFontName, txtFontName)");
txtFontName.onfocus = new Function("txtFontName.select()");
txtFontName.onchange = new
Function("setFont(getTextRange(elmSample))");
txtFontName.onkeyup = new Function("syncTextFont()");
txtFontName.onfocus = new Function("txtFontName.select()");
txtFontName.onkeypress = new Function("txtDefaultESC()");
txtFontStyle.onblur = new
Function("syncSelect(selFontStyle, txtFontStyle)");
txtFontStyle.onfocus = new Function("txtFontStyle.select()");
txtFontStyle.onchange = new Function("setFontStyle" +
"(getTextRange(elmSample))");
txtFontStyle.onkeyup = new Function("synchText()");
txtFontStyle.onfocus = new Function("txtFontStyle.select()");
txtFontStyle.onkeypress = new Function("txtDefaultESC()");
txtFontSize.onblur = new
Function("syncSelect(cmdFontSize, txtFontSize)");
txtFontSize.onfocus = new Function("txtFontSize.select()");
txtFontSize.onchange = new
Function("setSelectStateCmd(cmdFontSize, " +
"getTextRange(elmSample))");
txtFontSize.onkeyup = new Function("synchText()");
txtFontSize.onfocus = new Function("txtFontSize.select()");
txtFontSize.onkeypress = new Function("txtDefaultESC()");
cmdFontName.onchange = new Function("syncSelect2(cmdFontName, txtFontName);" +
"setFont(getTextRange(elmSample))");
selFontStyle.onchange = new Function("syncSelect2(selFontStyle," +
"txtFontStyle);" +
"setFontStyle(getTextRange(elmSample))");
cmdFontSize.onchange = new Function("syncSelect2(cmdFontSize, txtFontSize);" +
"setSelectStateCmd(cmdFontSize, getTextRange(elmSample))");
chkUnderline.onclick = new Function("setCheckStateCmd(chkUnderline," +
"getTextRange(elmSample))");
selColor.onchange = new Function("setFontColor(getTextRange(elmSample))");
btnCustom.onclick = new Function("btnCustomClick()");
btnOK.onclick = new Function("btnOKClick()");
btnCancel.onclick = new Function("btnCancelClick()");
fillFontSelect(cmdFontName);
getCheckStateCmd(chkUnderline, rngCurrent);
getSelectStateCmd(cmdFontName, rngCurrent);
getSelectStateCmd(cmdFontSize, rngCurrent);
getFontStyle();
selColor.customColor = 0;
getFontColor();
syncSelect2(cmdFontName, txtFontName);
syncSelect2(selFontStyle, txtFontStyle);
syncSelect2(cmdFontSize, txtFontSize);
txtFontName.select();
g_szLastFound = txtFontName.value;
updateSample();
txtFontName.focus();
}
function btnCustomClick()
{
var result = dialogHelper.choosecolordlg(selColor.customColor);
if (result != 0)
{
selColor.customColor = result;
selColor.value = "custom";
setFontColor(getTextRange(elmSample));
}
}
function btnOKClick()
{
var globalDoc = window.dialogArguments;
var range = globalDoc;
setCheckStateCmd(chkUnderline, range);
setSelectStateCmd(cmdFontSize, range);
setFont(range);
setFontColor(range);
setFontStyle(range);
window.close();
}
function synchText()
{
var index;
var elmSource = window.event.srcElement;
var arrSelect = new Array();
var elmSelect;
var elmOptions;
arrSelect["txtFontName"] = cmdFontName;
arrSelect["txtFontStyle"] = selFontStyle;
arrSelect["txtFontSize"] = cmdFontSize;
elmSelect = arrSelect[elmSource.id];
elmOptions = elmSelect.options;
if (TextboxKeyDown(elmSource, elmSelect, window.event.keyCode))
return;
if ("" != elmSource.value)
{
elmSelect.selectedIndex = findMatch(elmSource.value,
elmOptions);
}
}
</SCRIPT>
<BODY id=bdy onload="loadBdy()" style="font-family: 'MS Shell Dlg'; font-size: 8pt;
background: threedface; color: windowtext;" scroll=no>
<OBJECT ID="dialogHelper" CLASSID="CLSID:3050f4e1-98b5-11cf-bb82-00aa00bdce0b"
HEIGHT=0 WIDTH=0 tabindex=-1>
</OBJECT>
<DIV id=divFontName style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 0.98em; top: 0.9126em; width: 2.38em; height: 1.2168em;">
<LABEL id=lblFontName for=txtFontName tabIndex=-1 helpid="35420"
helpfile=msoe.hlp>
<u>F</u>ont:</LABEL>
</DIV>
<DIV id=divFontStyle style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 13.86em; top: 0.9126em; width: 4.76em; height: 1.2168em;">
<LABEL id=lblFontStyle for=txtFontStyle tabIndex=-1 helpid="35425"
helpfile=msoe.hlp>
St<u>y</u>le:</LABEL>
</DIV>
<DIV id=divFontSize style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 20.58em; top: 0.9126em; width: 2.24em; height: 1.2168em;">
<LABEL id=lblFontSize for=txtFontSize tabIndex=-1 helpid="35430"
helpfile=msoe.hlp>
<u>S</u>ize:</LABEL>
</DIV>
<INPUT type=text ID=txtFontName ACCESSKEY=f tabIndex=5
style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 0.98em; top: 2.3em; width: 12.04em; height: 1.9773em; "
helpid="35420" helpfile=msoe.hlp>
<INPUT type=text ID=txtFontStyle ACCESSKEY=y tabIndex=10
style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 13.86em; top: 2.3em; width: 5.8em; height: 1.9773em; "
helpid="35425" helpfile=msoe.hlp>
<INPUT type=text ID=txtFontSize ACCESSKEY=s tabIndex=15
style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 20.58em; top: 2.3em; width: 4.8em; height: 1.9773em; "
helpid="35430" helpfile=msoe.hlp>
<SELECT ID=cmdFontName style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 0.8em; top: 4.2588em; width: 12.2em; height: 9.9739em; "
name=setCmdID tabIndex=-1 size=7
helpid="35420" helpfile=msoe.hlp>
</SELECT>
<SELECT ID=selFontStyle size=7 tabIndex=-1
style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 13.8em; top: 4.2588em; width: 6em; height: 9.9739em; "
helpid="35425" helpfile=msoe.hlp>
<OPTION id=optRegular VALUE=Regular SELECTED> Regular </OPTION>
<OPTION id=optItalic VALUE=Italic> Italic </OPTION>
<OPTION id=optBold VALUE=Bold> Bold </OPTION>
<OPTION id=optBoldItalic VALUE=Bold-Italic> Bold Italic </OPTION>
</SELECT>
<SELECT ID=cmdFontSize size=7 tabIndex=-1 name=setCmdID
style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 20.5em; top: 4.2588em; width: 5em; height: 9.9739em; "
helpid="35430" helpfile=msoe.hlp>
<OPTION id=opt8 VALUE=1> 8 </OPTION>
<OPTION id=opt10 VALUE=2> 10 </OPTION>
<OPTION id=opt12 VALUE=3 SELECTED> 12 </OPTION>
<OPTION id=opt14 VALUE=4> 14 </OPTION>
<OPTION id=opt18 VALUE=5> 18 </OPTION>
<OPTION id=opt24 VALUE=6> 24 </OPTION>
<OPTION id=opt36 VALUE=7> 36 </OPTION>
</SELECT>
<FIELDSET id=fldEffects style="font-family: MS Shell Dlg; font-size: 8pt;
position: absolute; left: 0.98em; top: 14.6em; width: 12.04em;
height: 8.8em;">
<LEGEND id=lgdEffects>
Effects
</LEGEND>
</FIELDSET>
<INPUT ID=chkUnderline ACCESSKEY=u type=checkbox tabIndex=35 value=Underline
name=setCmdID helpid="35445" helpfile=msoe.hlp
style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 2em; top: 16.5em; width: 1.2em; height: 1.2em; ">
<DIV id=divUnderline style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 3.6em; top: 16.5789em; width: 6.44em; height: 1.521em;">
<LABEL id=lblUnderline for=chkUnderline helpid="35445" helpfile=msoe.hlp
tabIndex=-1><u>U</u>nderline
</LABEL>
</DIV>
<DIV id=divColor style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 1.96em; top: 18.8604em; width: 2.66em; height: 1.2168em;">
<LABEL id=lblColor helpid="35440" helpfile=msoe.hlp for=selColor>
<u>C</u>olor:</LABEL>
</DIV>
<SELECT ID=selColor ACCESSKEY=c tabIndex=55
style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 1.96em; top: 20.3814em; width: 7em; height: 1.21em; "
helpid="35440" helpfile=msoe.hlp>
<OPTION id=optBlack value=0 > Black </OPTION>
<OPTION id=optWhite value=16777215> White </OPTION>
<OPTION id=optGreen value=32768 > Green </OPTION>
<OPTION id=optMaroon value=128 > Maroon </OPTION>
<OPTION id=optOlive value=32896 > Olive </OPTION>
<OPTION id=optNavy value=8388608 > Navy </OPTION>
<OPTION id=optPurple value=8388736 > Purple </OPTION>
<OPTION id=optGray value=8421504 > Gray </OPTION>
<OPTION id=optYellow value=65535 > Yellow </OPTION>
<OPTION id=optLime value=65280 > Lime </OPTION>
<OPTION id=optAqua value=16776960> Aqua </OPTION>
<OPTION id=optFuchsia value=16711935> Fuchsia </OPTION>
<OPTION id=optSilver value=12632256> Silver </OPTION>
<OPTION id=optRed value=255 > Red </OPTION>
<OPTION id=optBlue value=16711680> Blue </OPTION>
<OPTION id=optTeal value=8421376 > Teal </OPTION>
<OPTION id=optCustom value=custom > Custom </OPTION>
</SELECT>
<BUTTON id=btnCustom tabIndex=56
style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 9.5em; top: 20.2em;"
helpid="35440" helpfile=msoe.hlp>
<IMG id=imgPalette
align=bottom height=16px width=16px hspace=0 vspace=0 src="palette.gif">
</BUTTON>
<FIELDSET id=fldSample style="font-family: MS Shell Dlg; font-size: 8pt; position:
absolute; left: 13.86em; top: 14.6em; width: 11.4em; height: 8.8em;">
<LEGEND id=lgdSample helpid="35435" helpfile=msoe.hlp>
Sample
</LEGEND>
</FIELDSET>
<table cellspacing borderColorDark=threedhighlight
borderColorLight=threedshadow noshade="yes" border=1 id=tblSample1
style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 14.98em; top: 16.5789em; width: 9.24em; height: 5.0277em;">
<tr>
<td id=tdSample1 style="font-family: MS Shell Dlg; font-size: 8pt;
left: 14.98em; top: 16.5789em; width: 9.24em; height: 5.0277em;">
</td>
</tr>
</table>
<DIV id=divSample2 style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 14.98em; top: 16.5789em; width: 8.9em; height: 5.0277em;
overflow: hidden" helpid="35435"
helpfile=msoe.hlp>
<TABLE id=tblSample2 style="font-family: MS Shell Dlg; font-size: 8pt; width: 8.9em;
height: 5.0277em; " helpid="35435"
helpfile=msoe.hlp>
<TR>
<TD id=tdSample2 style="font-family: MS Shell Dlg; font-size: 8pt; width: 8.9em;
height: 5.0277em; "
helpid="35435" helpfile=msoe.hlp>
<CENTER>
<DIV id=elmSample>
<NOBR id=nbrSample helpid="35435" helpfile=msoe.hlp>
AaBbYyZz</NOBR></DIV></CENTER>
</TD>
</TR>
</TABLE>
</DIV>
<BUTTON id=btnOK tabIndex=60
style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 26.6em; top: 2.2815em; width: 7em; height: 2.2em; "
helpid="28443" helpfile="windows.hlp" type=submit>
OK</BUTTON>
<BUTTON id=btnCancel tabIndex=70
style="font-family: MS Shell Dlg; font-size: 8pt; position: absolute;
left: 26.6em; top: 4.7151em; width: 7em; height: 2.2em; "
helpid="28444" helpfile="windows.hlp" type=reset>
Cancel</BUTTON>
</BODY>
</HTML>
