;
window.close();
return true;
}
function BodyOnKeyPress(nCode)
{
if (nCode == 27)
{
window.close();
return;
}
}
function OnPageLoad()
{
var L_PreCipherStrength_Text = "";
var L_PostCipherStrength_Text = "-Bit";
var L_UpdateInfo_Text = "Updateinformation";
var L_Unknown_Text = "Unbekannt ";
L_UpdateVersions_Text = "Updateversionen:";
L_updateWidth_number= "8em";
L_updateFontSize_number="8pt";
L_UpdateFont_Fontname ="Tahoma, MS Shell Dlg";
updateUrl = "";
var cipherStrength = "";
if ((null != window.dialogArguments))
{
arrArgs = window.dialogArguments.split("~");
spaVersion.innerText = arrArgs[0];
if (arrArgs[3] == "168")
cipherStrength = 128;
else if (arrArgs[3] == "128")
cipherStrength = 40;
else
cipherStrength = arrArgs[3];
spaCipher.innerText = L_PreCipherStrength_Text + cipherStrength + L_PostCipherStrength_Text;
pID.innerText=arrArgs[4];
if (null != arrArgs[6])
spaIEAKInfo.innerText = arrArgs[6];
updateUrl = arrArgs[5];
}
else
{
spaVersion.innerText = L_Unknown_Text;
spaCipher.innerText = L_Unknown_Text;
pID.innerText = L_Unknown_Text;
}
if ("" == updateUrl)
updateUrl = "http://www.microsoft.com/isapi/redir.dll?prd=ie&ar=128bit";
var mv=window.navigator.appMinorVersion;
var temp_mv_string = "";
if(mv!="0")
{
for(ictr=0;ictr<mv.length;ictr++)
{
if(mv.charAt(ictr)==";")
{
temp_mv_string = temp_mv_string + "; "
}
else
{
temp_mv_string = temp_mv_string + mv.charAt(ictr)
}
}
mv = temp_mv_string
}
minorversion.innerText=L_UpdateVersions_Text + mv;
}
window.onerror = HandleError;
</script>
</head>
<BODY bgcolor="#FFFFFF" onload="OnPageLoad(); fnShow64Flag();" onkeydown="BodyOnKeyPress(event.keyCode)" onkeypress="BodyOnKeyPress(event.keyCode)"
scroll=no>
<table border=0>
<TR height=10>
<TD></TD>
<TD></TD>
<TD></TD>
<TD></TD>
<TD></TD>
</TR>
<TR>
<TD></TD>
<TD id=Logo colspan=3 align=left><img src="res://shdoclc.dll/ie5.gif"></TD>
<TD></TD>
</TR>
<TR>
<TD></TD>
<TD></TD>
<TD id=ProdInfoAlign colspan=2 align=left>
<ID id=ProductInfo1>
<span id=ProdInfoStyle style="WIDTH: 25em; COLOR: black; FONT: 8pt Tahoma, MS Shell Dlg">
<BR>
<ID id=ProductInfo2>
Version:</id> <SPAN id=spaVersion></SPAN> <span id="o64bitFlag" style="padding-left:10px"></span><br>
<ID id=ProductInfo3>
Verschlüsselungsstärke: </id><SPAN id=spaCipher ></SPAN>&nbsp;<br>
<ID id=ProductInfo4>
Product ID:</id><SPAN id=pID></SPAN><br>
<span id=minorversion></SPAN><br>
<ID id=ProductInfo6></id>
<SPAN id=spaIEAKInfo>&nbsp;</SPAN>
</TD>
<TD></TD>
</TR>
<TR>
<TD></TD>
<TD></TD>
<TD id=copyrightAlign colspan=2 align=left> <TEXTAREA style="WIDTH: 28em; Font: 8pt Tahoma, MS Shell Dlg" id=copyrightText border=0 cols=55 rows=4 readonly>
Basiert auf NCSA Mosaic. NCSA Mosaic(TM); wurde am National Center for Supercomputing Applications an der Universität Illinois bei Urbana-Champaign entwickelt.
Veröffentlicht unter einem Lizenzvertrag mit Spyglass, Inc.
Enthält lizenzierte Sicherheitssoftware von RSA Data Security Inc.
Teile dieser Software basieren teilweise auf der Arbeit der Independent JPEG Group.
Multimedia-Softwarekomponenten, einschließlich Indeo(R); Video, Indeo(R) Audio und Web Design Effects wurden von Intel Corp. zur Verfügung gestellt.
Unix-Version enthält lizenzierte Software von Mainsoft Corporation. Copyright (c) 1998-99 Mainsoft Corporation. Alle Rechte vorbehalten. Mainsoft ist eine Marke der Mainsoft Corporation. 
Warnung: Dieses Programm ist durch US-amerikanische Urheberrechtsgesetze und internationale Urheberrechtsverträge geschützt. Unbefugte Vervielfältigung oder unbefugter Vertrieb dieses Programms oder eines Teils davon wird sowohl straf- als auch zivilrechtlich verfolgt und kann schwere Strafen und Schadenersatzforderungen zur Folge haben.
</TEXTAREA>
</TD>
<TD></TD>
</TR>
<TR>
<TD></TD>
<TD width=80><img src="res://shdoclc.dll/flag.gif"></TD>
<TD id=ProductInfo5><a style="WIDTH: 20em; COLOR: black; FONT: 8pt Tahoma, MS Shell Dlg" href="http://www.microsoft.com/isapi/redir.dll?prd=ie&pver=6.0&ar=aboutie&sba=copyr" id="copyright"><ID id=copyrghtText>Copyright &copy;1995-2004 Microsoft Corp.</ID></a>
</TD>
<TD id=ok-button align=right><BUTTON tabindex=1 type=submit align=right id="okButton" class=button onClick="window.close();" >OK</BUTTON>
</TD>
<Td></TD>
</TR>
</table>
</span>
</BODY>
</HTML>




function Agent_AutoUpdateAddCommandsHelper() 
{
    var L_AutoUpdateCommand1_Text = "Wie funktionieren automatische &Updates?";
    var L_AutoUpdateCommand2_Text = "Wie werden automatische Updates ge&downloadet?";
    var L_AutoUpdateCommand3_Text = "Wie werden automatische Updates &installiert?";
    var L_AutoUpdateCommand4_Text = "Wie kann ich die &Einstellungen für automatische Updates ändern?";
    var L_AutoUpdateCommand5_Text = "Muss ich sonst &noch irgendetwas tun?";

    g_AgentCharacter.Commands.Add("Agent_AutoUpdateWhatDoesAuDo",   L_AutoUpdateCommand1_Text);
    g_AgentCharacter.Commands.Add("Agent_AutoUpdateHowDownloaded",  L_AutoUpdateCommand2_Text);
    g_AgentCharacter.Commands.Add("Agent_AutoUpdateWhenInstalled",  L_AutoUpdateCommand3_Text);
    g_AgentCharacter.Commands.Add("Agent_AutoUpdateHowChange",      L_AutoUpdateCommand4_Text);
    g_AgentCharacter.Commands.Add("Agent_AutoUpdateAnythingElse",   L_AutoUpdateCommand5_Text);
}

function Agent_AutoUpdateAddCommands() 
{
    Agent_AutoUpdateAddCommandsHelper();
    
    var L_AutoUpdateCommand6_Text = "Warum ist die &Schaltfläche \"Weiter\" nicht vorhanden?";

    g_AgentCharacter.Commands.Add("Agent_AutoUpdateWhereIsNextButton",  L_AutoUpdateCommand6_Text);
        
    Agent_AddAssistantanceCommand();
}

function Agent_OnAutoUpdatePreDisplayMenu() 
{
    if (g.btnNext.disabled) 
    {
        var L_AutoUpdateMenuCommand6_Text = "Warum ist die &Schaltfläche \"Weiter\" nicht vorhanden?";

        try 
        {
            g_AgentCharacter.Commands.Insert("Agent_AutoUpdateWhereIsNextButton", "Agent_AutoUpdateAlreadyInstalled",false,L_AutoUpdateMenuCommand6_Text);
        }
        catch (e) 
        {
        }
    }

    else 
    {
        try 
        {
            g_AgentCharacter.Commands.Remove("Agent_AutoUpdateWhereIsNextButton");
        }
        catch (e) 
        {
        }
    }
}

function Agent_AutoUpdateWhatDoesAuDo() 
{    
    var L_AutoUpdateWhatDoesAuDo1_Text = "Sicherheitsupdates und andere wichtige Updates können automatisch an den Computer geliefert werden.";
    Agent_Speak(L_AutoUpdateWhatDoesAuDo1_Text);     
}

function Agent_AutoUpdateHowDownloaded() 
{    
    var L_AutoUpdateHowDownloaded1_Text = "